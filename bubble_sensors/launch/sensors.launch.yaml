launch:
  - arg:
      name: use_sim
      default: "false"

  - arg:
      name: use_generic
      default: "false"

  - arg:
      name: use_dvl
      default: "true"

  - arg:
      name: use_imu
      default: "false"

  - arg:
      name: use_ekf
      default: "true"

  - node:
      pkg: bubble_sensors
      if: $(var use_generic)
      exec: generic_sensor_publisher
      param:
        - name: noise_stddev
          value: 0.05
        - name: position_meas
          value: true
        - name: angular_meas
          value: true
        - name: pos_twist
          value: true
        - name: angular_twist
          value: true
        - name: input_topic
          value: "/model/bluerov2/odometry"
        - name: output_topic
          value: "/sensors/generalized_sensor_test"
        - name: use_sim_time
          value: $(var use_sim)

  - node:
      pkg: bubble_sensors
      if: $(var use_dvl)
      exec: performance_dvl
      param:
        - name: noise_stddev
          value: 0.0
        - name: bias
          value: 0.0
        - name: long_term_inaccuracy_percentage
          value: 0.1
        - name: resolution_mms
          value: 0.1
        - name: angular_twist
          value: false
        - name: input_topic
          value: "/model/bluerov2/odometry"
        - name: output_topic
          value: "/dvl/velocity"
        - name: use_sim_time
          value: $(var use_sim)

  - node:
      pkg: bubble_sensors
      if: $(var use_imu)
      exec: vectornav_imu
      param:
        - name: accel_noise_density_mg
          value: 0.14
        - name: gyro_noise_density_deg
          value: 0.0035
        - name: sample_rate
          value: 400
        - name: accel_bias_stability_mghr
          value: 0.04
        - name: gyro_bias_stability_deghr
          value: 10.0
        - name: resolution
          value: 0.00001
        - name: input_topic
          value: "/model/bluerov2/odometry"
        - name: output_topic
          value: "/vn100/imu"
        - name: use_sim_time
          value: $(var use_sim)

  # Define the transformations from the base link into the dvl and imu frames
  # # NOTE: MAKE SURE ALL OF THESE FRAMES ARE THE SAME AS THE FRAMES IN THE DESCRIPTION FILE(sensors.xacro)!!!!
  # - node:
  #     pkg: tf2_ros
  #     exec: static_transform_publisher
  #     name: base_link_to_dvl
  #     args: --x 0.0 --y 0.0 --z -0.2 --roll 0.0 --pitch 3.14159 --yaw 0.0 --frame-id base_link --child-frame-id dvl

  # - node:
  #     pkg: tf2_ros
  #     exec: static_transform_publisher
  #     name: base_link_to_vn100
  #     args: --x 0.0 --y 0.0 --z 0.1 --roll 0.0 --pitch 0.0 --yaw 0.0 --frame-id base_link --child-frame-id vn100

  #launch the roz_gz_bridge to convert the imu gz msg to ros
  - node:
      pkg: ros_gz_bridge
      exec: parameter_bridge
      if: $(var use_sim)
      args: /vn100/gz_data@sensor_msgs/msg/Imu[gz.msgs.IMU
      param:
        - name: use_sim_time
          value: $(var use_sim)

  - include:
      if: $(var use_ekf)
      file: $(find-pkg-share bubble_sensors)/launch/ekf.launch.py
